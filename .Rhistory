check()
check()
use_package("rtracklayer")
check()
#' Download a gtf file from ncbi.
#'@description
#' Download a gtf file from ncbi and get gene & protein infomations.
#'
#' @param No.assembly NCBI assembly number, such as "GCF_000001405.40".
#'
#' @return gene & protein informations.
#' @export
#'
#' @examples NA
down_gtf <- function(No.assembly){
node_url <- c("https://api.ncbi.nlm.nih.gov/datasets/v2alpha/genome/accession/",No.assembly,"/download?include_annotation_type=GENOME_GTF")
node_url <- paste(node_url,sep = "",collapse = "")
filename <- paste(No.assembly,".zip",sep = "",collapse = "")
utils::download.file(node_url,destfile = filename)
gtf <- paste("ncbi_dataset/data/",No.assembly,"/genomic.gtf",sep = "",collapse = "")
utils::unzip(filename,gtf)
gtf <- rtracklayer::import('genomic.gtf')
gtf <- as.data.frame(gtf)
Protein <- gtf[,c("protein_id","gene")]
Protein <- Protein[is.na(Protein$protein_id)==F,]
return(Protein)
}
load_all()
check()
document()
document()
check()
install()
use_r("down_protein.R")
document()
document()
use_r("down_protein.R")
document()
library(devtools)
library(devtools)
document()
document()
document()
document()
check()
load_all()
install()
down_protein("GCF_000001405.40")
?download.file
check()
load_all()
install()
load_all()
install()
down_protein("GCF_000001405.40")
load_all()
install()
down_protein("GCF_000001405.40")
load_all()
check()
install()
down_protein("GCF_000001405.40")
??curl
curl("https://api.ncbi.nlm.nih.gov/datasets/v2alpha/genome/accession/GCF_000001405.40/download?include_annotation_type=PROT_FASTA")
curl::curl("https://api.ncbi.nlm.nih.gov/datasets/v2alpha/genome/accession/GCF_000001405.40/download?include_annotation_type=PROT_FASTA")
curl_download("https://api.ncbi.nlm.nih.gov/datasets/v2alpha/genome/accession/GCF_000001405.40/download?include_annotation_type=PROT_FASTA", ncbidata.zip)
curl::curl_download("https://api.ncbi.nlm.nih.gov/datasets/v2alpha/genome/accession/GCF_000001405.40/download?include_annotation_type=PROT_FASTA", ncbidata.zip)
curl::curl_download("https://api.ncbi.nlm.nih.gov/datasets/v2alpha/genome/accession/GCF_000001405.40/download?include_annotation_type=PROT_FASTA", tmp)
curl_download("https://api.ncbi.nlm.nih.gov/datasets/v2alpha/genome/accession/GCF_000001405.40/download?include_annotation_type=PROT_FASTA", "ncbidata.zip")
curl::curl_download("https://api.ncbi.nlm.nih.gov/datasets/v2alpha/genome/accession/GCF_000001405.40/download?include_annotation_type=PROT_FASTA", "ncbidata.zip")
?download.file
download.file("https://api.ncbi.nlm.nih.gov/datasets/v2alpha/genome/accession/GCF_000001405.40/download?include_annotation_type=PROT_FASTA",destfile = "ncbi.zip",method="wget")
check()
install()
curl::curl_download("https://api.ncbi.nlm.nih.gov/datasets/v2alpha/genome/accession/GCF_000001405.40%2CGCF_000001635.27/download?chromosomes=1&chromosomes=2&chromosomes=3&chromosomes=X&chromosomes=Y&chromosomes=MT&include_annotation_type=PROT_FASTA", "ncbidata.zip")
？download.file
?download.file
#' Download a protein.fasta file from ncbi.
#'@description
#'Download a protein.fasta file from ncbi and uploaded to STRINGdb.
#'
#' @param No.assembly NCBI assembly number, such as "GCF_000001405.40".
#'
#' @return NA
#' @export
#'
#' @examples NA
down_protein <- function(No.assembly){
node_url <- c("https://api.ncbi.nlm.nih.gov/datasets/v2alpha/genome/accession/",No.assembly,"/download?include_annotation_type=PROT_FASTA")
node_url <- paste(node_url,sep = "",collapse = "")
filename <- paste(No.assembly,".zip",sep = "",collapse = "")
utils::download.file(node_url,destfile = filename,method="libcurl",extra = "api-key: halldave")
pro <- paste("ncbi_dataset/data/",No.assembly,"/protein.faa",sep = "",collapse = "")
utils::unzip(filename,pro)
}
down_protein("GCF_000001405.40")
BiocManager::install("ncbi")
BiocManager::install("ncbi")
use_r("deal_gtf.R")
document()
check
check()
library(devtools)
check()
document()
check()
load_all()
install()
check()
check()
document()
install()
library(devtools)
load_all()
protein <- deal_gtf("fish.gtf")
make_customdb("glutamate.tsv",protein)
interaction_nodes <- "glutamate.tsv"
Protein2Gene <- utils::read.csv(interaction_nodes,sep="\t")[,c(1,2)]
tmp1 <- Protein2Gene[,1]
tmp2 <- Protein2Gene[,2]
if (is.null(enrich)){}
for (i in 1:length(Protein2Gene$V2)) {
gene1 <- gene_info$gene[match(tmp1[i],gene_info$protein_id)]
gene2 <- gene_info$gene[match(tmp2[i],gene_info$protein_id)]
tmp1[i] <- gene1
tmp2[i] <- gene2
print(i)
}
gene_info <- protein
for (i in 1:length(Protein2Gene$V2)) {
gene1 <- gene_info$gene[match(tmp1[i],gene_info$protein_id)]
gene2 <- gene_info$gene[match(tmp2[i],gene_info$protein_id)]
tmp1[i] <- gene1
tmp2[i] <- gene2
print(i)
}
Protein2Gene[,1] <- tmp1
Protein2Gene[,2] <- tmp2
colnames(Protein2Gene[,c(1,2)]) <- c("ligand","receptor")
Protein2Gene$interaction_name <- paste0(Protein2Gene$ligand,"-",Protein2Gene$receptor)
Protein2Gene$pathway_name <- Protein2Gene$ligand
geneinfo <- as.data.frame(unique(c(Protein2Gene$ligand,Protein2Gene$receptor)))
colnames(geneinfo) <- "Symbol"
check()
check()
load_all()
install()
protein <- deal_gtf("fish.gtf")
protein <- deal_gtf("fish.gtf")
make_customdb("glutamate.tsv",protein,enrich = "KEGG : ely00250")
make_customdb("glutamate.tsv",protein)
Protein2Gene <- utils::read.csv(interaction_nodes,sep="\t")[,c(1,2)]
tmp1 <- Protein2Gene[,1]
tmp2 <- Protein2Gene[,2]
if (is.null(enrich)){}
else
{
Protein2Gene[,3] <- enrich
colnames(Protein2Gene[,3]) <- "evidence"
}
for (i in 1:length(Protein2Gene$V2)) {
gene1 <- gene_info$gene[match(tmp1[i],gene_info$protein_id)]
gene2 <- gene_info$gene[match(tmp2[i],gene_info$protein_id)]
tmp1[i] <- gene1
tmp2[i] <- gene2
print(i)
}
Protein2Gene[,1] <- tmp1
Protein2Gene[,2] <- tmp2
colnames(Protein2Gene[,c(1,2)]) <- c("ligand","receptor")
View(Protein2Gene)
colnames(Protein2Gene) <- c("ligand","receptor")
check()
protein <- deal_gtf("fish.gtf")
make_customdb("glutamate.tsv",protein,enrich = "KEGG : ely00250")
make_customdb("glutamate.tsv",protein)
check()
load_all()
install()
protein <- deal_gtf("fish.gtf")
make_customdb("glutamate.tsv",protein)
chatdb <- make_customdb("glutamate.tsv",protein)
col(protein)
check()
load_all()
install()
chatdb <- make_customdb("glutamate.tsv",protein)
get_nodes(c("TP53","CDK2,"CD34))
nodes <- get_nodes(c("TP53","CDK2,"CD34""))
nodes <- get_nodes(c("TP53","CDK2,"CD34"))
nodes <- get_nodes(c("TP53","CDK2"),species=9606)
nodes <- get_nodes(c("TP53","CDK2","CD34"),species=9606)
make_cellchatdb(nodes)
chatdb <- make_cellchatdb(nodes)
chatdb <- make_cellchatdb(nodes,enrich = "KEGG : 02020")
make_customdb("glutamate.tsv",protein,enrich = "KEGG:02020")
check()
load_all()
install()
make_customdb("glutamate.tsv",protein,enrich = "KEGG:02020")
make_customdb("glutamate.tsv",protein,enrich = "KEGG:02020")
check_all()
check()
load_all()
install()
make_customdb("glutamate.tsv",protein,enrich = "KEGG:02020")
check()
load_all()
install()
library(devtools)
load_all()
check()
load_all()
install()
?make_cellchatdb
check()
?make_cellchatdb
check()
document（
document()
check()
library(devtools)
check()
load_all()
install()
make_cellchatdb
library(devtools)
check()
load_all()
install()
library(tocelldb)
rfq_nodes <- get_nodes(c("PPAT","GPR143","GAD1","ALDH5A1","GOT2","NAT8L","ASPA","FOLH1"),
species = 59479,
required_score = 400,
network_type = "functional",
show_query_node_labels = 0,
add_nodes = 10,
caller_identity = "Dave")
rfq_cellchatdb <- make_customdb(rfq_nodes, enrich = "KEGG：rfq00250", annotation = "Secreted Signaling")
rfq_cellchatdb <- make_customdb(rfq_nodes, enrich = "KEGG：rfq00250", annotation = "Secreted Signaling")
check()
load_all()
install()
rfq_cellchatdb <- make_customdb(rfq_nodes, enrich = "KEGG：rfq00250", annotation = "Secreted Signaling")
rfq_cellchatdb <- make_customdb(interaction_nodes=rfq_nodes, enrich = "KEGG：rfq00250", annotation = "Secreted Signaling")
check()
load_all()
install()
rfq_cellchatdb <- make_customdb(interaction_nodes=rfq_nodes, enrich = "KEGG：rfq00250", annotation = "Secreted Signaling")
rfq_cellchatdb <- make_customdb(rfq_nodes, enrich = "KEGG：rfq00250", annotation = "Secreted Signaling")
check()
document
document()
load_all()
install()
library(devtools)
check()
load_all()
document()
install()
?lapply
?apply()
interaction_nodes <- "/home/halldave/Test2celldb/glutamate.csv"
interaction_nodes <- utils::read.csv(interaction_nodes,sep="\t")[,c(1,2)]
interaction_nodes <- "/home/halldave/Test2celldb/glutamate.tsv"
interaction_nodes <- utils::read.csv(interaction_nodes,sep="\t")[,c(1,2)]
tmp1 <- interaction_nodes[,1]
tmp2 <- interaction_nodes[,2]
colnames(interaction_nodes) <- c("ligand","receptor")
#'
#' @param interaction_nodes nodes file downloaded from STRINGdb.
#' @param gene_info gene & protein infomations generated from down_gtf() if you need to transform protein_id to gene.
#' @param enrich A given pathway type, such as "KEGG：map04216".
#' @param annotation A given interaction type, one of "Secreted Signaling", "ECM-Recptor", "Cell-Cell Contact", "Non-protein Signaling".
#'
#' @return a cell chat database.
#' @export
#'
#' @examples NA
make_customdb <- function(interaction_nodes,gene_info=NULL,enrich=NULL,annotation=NULL){
if (is.null(gene_info)){
interaction_nodes <- interaction_nodes[,c(1,2)]
colnames(interaction_nodes) <- c("ligand","receptor")
interaction_nodes$interaction_name <- paste0(interaction_nodes$ligand,"-",interaction_nodes$receptor)
interaction_nodes$pathway_name <- interaction_nodes$ligand
geneinfo <- as.data.frame(unique(c(interaction_nodes$ligand,interaction_nodes$receptor)))
if (is.null(enrich)){}
else
{
interaction_nodes$evidence = enrich
}
if (is.null(annotation)){}
else
{
interaction_nodes$annotation <- annotation
}
colnames(geneinfo) <- "Symbol"
}
else {
interaction_nodes <- utils::read.csv(interaction_nodes,sep="\t")[,c(1,2)]
# tmp1 <- interaction_nodes[,1]
# tmp2 <- interaction_nodes[,2]
# colnames(interaction_nodes) <- c("ligand","receptor")
# for (i in 1:length(interaction_nodes$ligand)) {
#   gene1 <- gene_info$gene[match(tmp1[i],gene_info$protein_id)]
#   gene2 <- gene_info$gene[match(tmp2[i],gene_info$protein_id)]
#   tmp1[i] <- gene1
#   tmp2[i] <- gene2
# }
interaction_nodes[,1] <- apply(interaction_nodes[,1],2,gene_info$gene[match(interaction_nodes[,1],gene_info$protein_id)])
interaction_nodes[,2] <- apply(interaction_nodes[,2],2,gene_info$gene[match(interaction_nodes[,2],gene_info$protein_id)])
# interaction_nodes[,1] <- tmp1
# interaction_nodes[,2] <- tmp2
interaction_nodes$interaction_name <- paste0(interaction_nodes$ligand,"-",interaction_nodes$receptor)
interaction_nodes$pathway_name <- interaction_nodes$ligand
geneinfo <- as.data.frame(unique(c(interaction_nodes$ligand,interaction_nodes$receptor)))
colnames(geneinfo) <- "Symbol"
if (is.null(enrich)){}
else
{
interaction_nodes$evidence <- enrich
}
if (is.null(annotation)){}
else
{
interaction_nodes$annotation <- annotation
}
}
return(CellChat::updateCellChatDB(
interaction_nodes,
gene_info = geneinfo,
other_info = NULL,
merged = FALSE,
species_target = NULL
))
}
setwd("/home/halldave/Test2celldb")
#'
#' @param interaction_nodes nodes file downloaded from STRINGdb.
#' @param gene_info gene & protein infomations generated from down_gtf() if you need to transform protein_id to gene.
#' @param enrich A given pathway type, such as "KEGG：map04216".
#' @param annotation A given interaction type, one of "Secreted Signaling", "ECM-Recptor", "Cell-Cell Contact", "Non-protein Signaling".
#'
#' @return a cell chat database.
#' @export
#'
#' @examples NA
make_customdb <- function(interaction_nodes,gene_info=NULL,enrich=NULL,annotation=NULL){
if (is.null(gene_info)){
interaction_nodes <- interaction_nodes[,c(1,2)]
colnames(interaction_nodes) <- c("ligand","receptor")
interaction_nodes$interaction_name <- paste0(interaction_nodes$ligand,"-",interaction_nodes$receptor)
interaction_nodes$pathway_name <- interaction_nodes$ligand
geneinfo <- as.data.frame(unique(c(interaction_nodes$ligand,interaction_nodes$receptor)))
if (is.null(enrich)){}
else
{
interaction_nodes$evidence = enrich
}
if (is.null(annotation)){}
else
{
interaction_nodes$annotation <- annotation
}
colnames(geneinfo) <- "Symbol"
}
else {
interaction_nodes <- utils::read.csv(interaction_nodes,sep="\t")[,c(1,2)]
# tmp1 <- interaction_nodes[,1]
# tmp2 <- interaction_nodes[,2]
# colnames(interaction_nodes) <- c("ligand","receptor")
# for (i in 1:length(interaction_nodes$ligand)) {
#   gene1 <- gene_info$gene[match(tmp1[i],gene_info$protein_id)]
#   gene2 <- gene_info$gene[match(tmp2[i],gene_info$protein_id)]
#   tmp1[i] <- gene1
#   tmp2[i] <- gene2
# }
interaction_nodes[,1] <- apply(interaction_nodes[,1],2,gene_info$gene[match(interaction_nodes[,1],gene_info$protein_id)])
interaction_nodes[,2] <- apply(interaction_nodes[,2],2,gene_info$gene[match(interaction_nodes[,2],gene_info$protein_id)])
# interaction_nodes[,1] <- tmp1
# interaction_nodes[,2] <- tmp2
interaction_nodes$interaction_name <- paste0(interaction_nodes$ligand,"-",interaction_nodes$receptor)
interaction_nodes$pathway_name <- interaction_nodes$ligand
geneinfo <- as.data.frame(unique(c(interaction_nodes$ligand,interaction_nodes$receptor)))
colnames(geneinfo) <- "Symbol"
if (is.null(enrich)){}
else
{
interaction_nodes$evidence <- enrich
}
if (is.null(annotation)){}
else
{
interaction_nodes$annotation <- annotation
}
}
return(CellChat::updateCellChatDB(
interaction_nodes,
gene_info = geneinfo,
other_info = NULL,
merged = FALSE,
species_target = NULL
))
}
gene_info <- deal_gtf('fish.gtf')
setwd("/home/halldave/Test2celldb")
gene_info <- deal_gtf('fish.gtf')
library(devtools)
check()
load_all()
document()
install()
library(devtools)
check()
check()
check()
check()
check()
check()
check()
check()
check()
library(devtools)
check()
document()
load_all
load_all(')
1
122''
''
load_all()
install()
test()
chcek()
check()
load_all()
install()
check()
load_all()
install()
remove.packages("tocelldb", lib="~/R/x86_64-pc-linux-gnu-library/4.3")
library(devtools)
install_github("HallDaveNineteenNintysix/tocelldb")
?tocelldb
??tocelldb
?deal_gtf()
library(tocelldb)
?deal_gtf()
library(tocelldb)
rfq_nodes <- get_nodes(c("PPAT","GPR143","GAD1","ALDH5A1","GOT2","NAT8L","ASPA","FOLH1"),
species = 59479,
required_score = 400,
network_type = "functional",
show_query_node_labels = 0,
add_nodes = 10,
caller_identity = "Dave")
rfq_cellchatdb <- make_customdb(rfq_nodes, enrich = "KEGG：rfq00250", annotation = "Secreted Signaling")
?mutate
mutate
library(devtools)
check()
??%>%
?%>%
use_package(dplyr)
use_package("dplyr")
load_all()
load_all()
gene_info <- deal_gtf('fish.gtf')
gene_info <- deal_gtf('fish.gtf')
ely00250 <- make_customdb("glutamate.tsv",gene_info,enrich = "KEGG: ely00250",annotation="Secreted Signaling")
ely00250 <- make_customdb("glutamate.tsv",gene_info,enrich = "KEGG: ely00250",annotation="Secreted Signaling")
load_all()
ely00250 <- make_customdb("glutamate.tsv",gene_info,enrich = "KEGG: ely00250",annotation="Secreted Signaling")
load_all()
ely00250 <- make_customdb("glutamate.tsv",gene_info,enrich = "KEGG: ely00250",annotation="Secreted Signaling")
load_all()
ely00250 <- make_customdb("glutamate.tsv",gene_info,enrich = "KEGG: ely00250",annotation="Secreted Signaling")
gene_info <- deal_gtf('fish.gtf')
ely00250 <- make_customdb("glutamate.tsv",gene_info,enrich = "KEGG: ely00250",annotation="Secreted Signaling")
load_all()
ely00250 <- make_customdb("glutamate.tsv",gene_info,enrich = "KEGG: ely00250",annotation="Secreted Signaling")
load_all()
ely00251 <- make_customdb("glutamate.tsv",gene_info,enrich = "KEGG: ely00250",annotation="Secreted Signaling")
check()
check()
document()
?rtracklayer::import
??rtracklayer::import
library(devtools)
load_all()
install()
library(devtools)
document()
load_all()
check()
install()
library(devtools)
check()
load_all()
install()
make_customdb
remove.packages("tocelldb", lib="~/R/x86_64-pc-linux-gnu-library/4.3")
library(devtools)
document()
library(devtools)
document()
check()
build()
build()
check()
document()
load_all()
